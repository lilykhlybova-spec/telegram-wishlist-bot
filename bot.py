import os
import asyncio
import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler, CallbackQueryHandler
)
from tinydb import TinyDB, Query

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.environ.get("TOKEN")  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞—Ç—å –Ω–∞ Render
CHAT_IDS_RAW = os.environ.get("CHAT_IDS", "")  # "427656853,5383245847"
CHAT_IDS = [int(x.strip()) for x in CHAT_IDS_RAW.split(",") if x.strip()]

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# --- –ü—É—Ç—å –∫ –ë–î (–≤ —Ä–∞–±–æ—á–µ–π –ø–∞–ø–∫–µ —Å–µ—Ä–≤–∏—Å–∞) ---
DB_PATH = os.path.join(os.getcwd(), "wishlist.json")
db = TinyDB(DB_PATH)
Wishlist = Query()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ ConversationHandler
ADD_GIFT = 1

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [["/add", "/list", "/reset"]]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text(
        "–õ—é–±–æ–≤—å –º–æ—è! –≠—Ç–æ –Ω–∞—à –ø–æ–º–æ—â–Ω–∏–∫ - –æ–±—â–∏–π –≤–∏—à–ª–∏—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏:",
        reply_markup=reply_markup
    )

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    return ADD_GIFT

async def save_gift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.from_user.first_name or str(update.message.from_user.id)
    gift_text = update.message.text.strip()
    if not gift_text:
        await update.message.reply_text("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞.")
        return ConversationHandler.END

    doc_id = db.insert({"user": user_name, "gift": gift_text, "taken": False})
    buttons = [
        [
            InlineKeyboardButton("–ó–∞–±—Ä–∞–ª ‚úÖ", callback_data=f"take:{doc_id}"),
            InlineKeyboardButton("–ù–µ –∑–∞–±—Ä–∞–ª ‚ùå", callback_data=f"untake:{doc_id}")
        ]
    ]
    keyboard = InlineKeyboardMarkup(buttons)

    for chat_id in CHAT_IDS:
        await context.bot.send_message(chat_id=chat_id, text=f"{user_name} –¥–æ–±–∞–≤–∏–ª(–∞) –ø–æ–¥–∞—Ä–æ–∫: {gift_text}", reply_markup=keyboard)
    return ConversationHandler.END

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data or ""
    if ":" not in data:
        await query.edit_message_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback.")
        return
    action, sid = data.split(":", 1)
    try:
        doc_id = int(sid)
    except:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–∞.")
        return
    item = db.get(doc_id=doc_id)
    if not item:
        await query.edit_message_text("–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if action == "take":
        db.update({"taken": True}, doc_ids=[doc_id])
        status_text = "–∑–∞–±—Ä–∞–ª(–∞)"
    else:
        db.update({"taken": False}, doc_ids=[doc_id])
        status_text = "–ø–æ–º–µ—Ç–∏–ª(–∞) –∫–∞–∫ –Ω–µ –∑–∞–±—Ä–∞–Ω"

    for chat_id in CHAT_IDS:
        await context.bot.send_message(chat_id=chat_id, text=f"{query.from_user.first_name} {status_text} –ø–æ–¥–∞—Ä–æ–∫: {item['gift']}")

async def list_gifts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        all_gifts = db.all()
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ë–î")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        return
    if not all_gifts:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç–æ–π.")
        return
    lines = []
    for i, item in enumerate(all_gifts, start=1):
        user = item.get("user", "anon")
        gift = item.get("gift", "<–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è>")
        taken = item.get("taken", False)
        status = "–ó–∞–±—Ä–∞–ª ‚úÖ" if taken else "–ù–µ –∑–∞–±—Ä–∞–ª ‚ùå"
        lines.append(f"{i}. {user}: {gift} ‚Äî {status}")
    text = "üéÅ –í–∏—à–ª–∏—Å—Ç:\n\n" + "\n".join(lines)
    MAX = 3800
    if len(text) <= MAX:
        await update.message.reply_text(text)
    else:
        for start in range(0, len(text), MAX):
            await update.message.reply_text(text[start:start+MAX])

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db.truncate()
    for chat_id in CHAT_IDS:
        await context.bot.send_message(chat_id=chat_id, text="–°–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—á–∏—â–µ–Ω!")

async def relay_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text and not text.startswith("/"):
        sender = update.message.from_user.first_name or str(update.message.from_user.id)
        for chat_id in CHAT_IDS:
            if chat_id != update.message.chat_id:
                await context.bot.send_message(chat_id=chat_id, text=f"{sender}: {text}")

# --- Application ---
app = ApplicationBuilder().token(TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("add", add)],
    states={ADD_GIFT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_gift)]},
    fallbacks=[]
)

app.add_handler(conv_handler)
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("list", list_gifts))
app.add_handler(CommandHandler("reset", reset))
app.add_handler(CallbackQueryHandler(button_handler))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, relay_all))

if __name__ == "__main__":
    asyncio.run(app.run_polling())
